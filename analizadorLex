# Analisis Lexico

import ply.lex as lex

#Lista con los nombres de los tokens

tokens = [
    # Palabra Clave

    'CLASS', 'EXTENDS', 'VOID', 'THIS', 'NEW', 'LENGTH', 'TRUE', 'FALSE',
    'NULL',

    #Control de flujo

    'IF', 'ELSE', 'RETURN', 'WHILE', 'BREAK', 'CONTINUE', 'FOR',

    #Operadores y delimitadores

    'MAS', 'MENOS', 'MULT', 'DIV', 'ASIGN', 'PUNTOCOMA', 'PARIZQ', 'PARDER', 
    'CORIZQ', 'CORDER', 'LLAVEIZQ', 'LLAVEDER', 'COMA',

    # Operadores booleanos

    'MENOR', 'MENOREQ', 'IGUAL', 'MAYOR', 'MAYOREQ', 'DIFERENTE',

    #Operadores logicos

    'AND', 'OR',

    #Literales
    'INT', 'FLOAT', 'STRING', 'BOOLEAN',
]

t_ignore = ' \t\r'

t_MAS = r'\+'
t_MENOS = r'-'
t_MULT = r'\*'
t_DIV = r'/'
t_ASIGN = r'='
t_PUNTOCOMA = r';'
t_PARIZQ = r'\('
t_PARDER = r'\)'
t_CORIZQ = r'\['
t_CORDER = r'\]'
t_COMA = r','
t_MENOR = r'<'
t_MENOREQ = r'<='
t_IGUAL = r'=='
t_MAYOR = r'>'
t_MAYOREQ = r'>='
t_DIFERENTE = r'!='
t_AND = r'&&'
t_OR = r'||'

#Diccionario de palabras reservadas y de operadores

reservados = {
        'class':'CLASS',
        'extends':'EXTENDS',
        'void': 'VOID',
        'int':'INT',
        'float':'FLOAT'
        'boolean', 'BOOLEAN',
        'string':'STRING'
        'return':'RETURN'
        'if':'IF'
        'else':'ELSE',
        'while':'WHILE',
        'break':'BREAK',
        'continue':'CONTINUE',
        'this':'THIS',
        'new':'NEW',
        'length':'LENGTH',
        'true':'TRUE',
        'false':'FALSE',
        'null':'NULL'
}
operadores = {
    r'+' : "MAS",
	r'-' : "MENOS",
	r'*' : "MULT",
	r'/' : "DIVI",
	r':=' : "ASIGN",
	r';' : "PUNTOCOMA",
	r'(' : "PARENIZQ",
	r')' : "PARENDER",
        r'[' : "CORIZQ",
        r']' : "CORDER",
	r',' : "COMA",
        r'<' : "MENOR",
	r'<=' : "MENOREQ",
	r'==' : "IGUAL",
	r'>=' : "MAYOREQ",
	r'>' : "MAYOR",
	r'!=' : "DIFERENTE",
	r'&&' : "AND",
	r'||' : "OR",
	
}

# Listado de palabras reservadas en Java

#abstract, assert, boolean, break, byte, case, catch, char, class, const,
#continue, default, do, double, else, enum, extends, final, finally, float,
#for, goto, if, implements, import, instanceof, int, interface, long, native,
#new, package, private, protected, public, return, short, static, strictfp,
#super, switch, synchronized, this, throw, throws, transient, try, void,
#volatile, while

# Descripcion de la expresion regular para los enteros
def t_ENTEROS(t):
    r'\d+'
    t.value = int(t.value)
    return t    

# Descripcion de la expresion regular para los hexadecimales
def t_HEXA(t):
    r'0[xX][0-9a-fA-F]+'
    return t

